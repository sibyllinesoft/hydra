# Frontend Base Configuration for Frontend Development Agents
# Combines engineering tools with browser automation for complete frontend workflow
# Used by: frontend-developer, ui-designer (when coding), mobile-app-builder (web views)

# Frontend Tools with Code Analysis and Browser Automation
frontend_tools:
  # Essential File Operations
  - Read
  - Write
  - Edit
  - MultiEdit
  - LS
  
  # Command & Search Operations
  - Bash
  - Grep
  - Glob
  
  # Web Operations (for technical research)
  - WebSearch
  - WebFetch
  
  # Frontend-Focused MCP Operations
  - mcp__git__                    # Version control (essential)
  - mcp__serena__                 # Code analysis & LSP operations for React/TypeScript
  - mcp__playwright__             # Browser automation for UI testing & debugging
  - mcp__sequential-thinking__    # Complex problem analysis
  - mcp__context7__              # Technical documentation & framework guides
  # NO supabase, NO sentry (use specialized agents for data/monitoring)

# Configuration Files All Frontend Agents Should Reference
universal_config_files:
  - path: "/home/nathan/.claude/CONTEXT.md"
    description: "Environment setup, project structure, development workflow"
    words: 618
  - path: "/home/nathan/.claude/PRINCIPLES.md" 
    description: "Development philosophy, SOLID principles, senior mindset"
    words: 757
  - path: "/home/nathan/.claude/RULES.md"
    description: "Operational safety, validation sequences, quality gates"
    words: 505
  - path: "/home/nathan/.claude/MCP.md"
    description: "Tool selection, server coordination, performance optimization"
    words: 2918
  - path: "/home/nathan/.claude/AGENTS.md"
    description: "Agent selection guide, specializations, orchestration patterns"
    words: 1575

# FRONTEND SPECIALIZATION RATIONALE:
# - serena MCP: Essential for React/TypeScript semantic analysis, component navigation, refactoring
# - playwright MCP: Critical for UI testing, visual regression, browser debugging, accessibility testing
# - git MCP: Essential for version control workflows and frontend deployment
# - sequential-thinking: Required for complex UI architecture and state management decisions
# - context7: Necessary for React/frontend framework documentation and best practices
# - NO database access: Frontend agents focus on UI/UX, not direct data operations
# - NO monitoring access: Separate monitoring agents handle error tracking and analytics

# FRONTEND DEVELOPMENT USE CASES:
# 1. React Component Development:
#    - serena: Analyze existing components, find symbols, refactor code
#    - context7: Research React patterns, hooks documentation, library usage
#    - git: Manage component file creation and version control
#
# 2. UI Testing & Validation:
#    - playwright: Browser automation for component testing, user interaction simulation
#    - playwright: Screenshot generation for visual regression testing
#    - playwright: Accessibility testing with built-in axe integration
#
# 3. Browser Debugging:
#    - playwright: Inspect page elements, debug JavaScript issues, analyze network requests
#    - playwright: Test responsive design across different viewport sizes
#    - serena: Code analysis to understand component behavior and state flow
#
# 4. Performance Testing:
#    - playwright: Performance audits, Core Web Vitals measurement
#    - serena: Code analysis for optimization opportunities
#    - sequential-thinking: Performance bottleneck analysis and resolution strategies

# SECURITY CONSIDERATION:
# Browser automation is carefully restricted to frontend development contexts
# Prevents unauthorized web interactions while enabling essential UI development workflows

# Total Context Cost: 6,373 words (~13,153 tokens)
# Updated: 2025-08-19 with frontend-specific MCP combination

# Usage Instructions:
# 1. Frontend agents requiring both code and browser capabilities reference "@frontend-base-config.yml"
# 2. Inherits all frontend tools including serena for code analysis and playwright for browser automation
# 3. Provides complete frontend development workflow from coding to testing
# 4. Maintains security by restricting data/monitoring operations to specialized agents
# 5. Ideal for agents that need to develop React components AND test UI behavior

# Example Frontend Agent Structure:
# ---
# name: react-component-developer
# description: |
#   Develops React components with integrated testing and browser debugging capabilities.
#   Combines TypeScript/React code analysis with browser automation for complete frontend workflow.
#   @frontend-base-config.yml
# color: cyan
# ---

# WHEN TO USE FRONTEND-BASE-CONFIG vs OTHER CONFIGS:
# - Use @frontend-base-config.yml when agent needs BOTH code development AND browser testing
# - Use @engineering-base-config.yml for pure backend/server-side development (no browser needs)
# - Use @testing-base-config.yml for pure testing agents (no code development needs)
# - Use @base-config.yml for general agents with no specialized MCP requirements