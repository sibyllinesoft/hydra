# Docker Compose configuration for Hydra CLI testing environment
# Provides isolated services and dependencies for comprehensive testing

version: '3.8'

services:
  # Main test runner service
  hydra-test:
    build:
      context: ../..
      dockerfile: tests/ci/Dockerfile.test
    container_name: hydra-test-runner
    environment:
      - NODE_ENV=test
      - CI=true
      - COVERAGE_THRESHOLD=95
      - TEST_TIMEOUT=300000
      - MAX_WORKERS=2
      - HYDRA_TEST_MODE=true
    volumes:
      - ../..:/app
      - hydra-test-cache:/app/node_modules/.cache
      - hydra-coverage:/app/tests/coverage
    working_dir: /app
    command: npm run test:all
    depends_on:
      - redis-test
      - mock-api
    networks:
      - hydra-test-network
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis service for integration testing
  redis-test:
    image: redis:7-alpine
    container_name: hydra-redis-test
    environment:
      - REDIS_PASSWORD=test-password
    command: redis-server --requirepass test-password --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    networks:
      - hydra-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "test-password", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - redis-test-data:/data

  # Mock API service for E2E testing
  mock-api:
    build:
      context: tests/fixtures
      dockerfile: Dockerfile.mock-api
    container_name: hydra-mock-api
    environment:
      - NODE_ENV=test
      - PORT=3001
      - MOCK_DELAY=100
    ports:
      - "3001:3001"
    networks:
      - hydra-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  # File system service for stress testing
  file-system-test:
    image: alpine:latest
    container_name: hydra-fs-test
    command: |
      sh -c "
        apk add --no-cache inotify-tools &&
        mkdir -p /test-files/large-files &&
        mkdir -p /test-files/many-files &&
        # Create large test file (100MB)
        dd if=/dev/zero of=/test-files/large-files/large-test.xml bs=1M count=100 &&
        # Create many small files (1000 files)
        for i in \$$(seq 1 1000); do
          echo '<project id=\"test-\$$i\"><name>Test \$$i</name></project>' > /test-files/many-files/test-\$$i.xml
        done &&
        tail -f /dev/null
      "
    volumes:
      - test-files:/test-files
    networks:
      - hydra-test-network

  # Performance monitoring service
  performance-monitor:
    image: prom/node-exporter:latest
    container_name: hydra-perf-monitor
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - hydra-test-network
    restart: unless-stopped

  # Security test service with restricted permissions
  security-test:
    image: alpine:latest
    container_name: hydra-security-test
    user: "1000:1000"
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
    tmpfs:
      - /tmp:exec,nosuid,size=100m
    command: |
      sh -c "
        apk add --no-cache nodejs npm &&
        npm install -g xmlstarlet &&
        tail -f /dev/null
      "
    networks:
      - hydra-test-network

  # Log aggregation service
  fluentd:
    build:
      context: tests/ci
      dockerfile: Dockerfile.fluentd
    container_name: hydra-log-aggregator
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf
      - test-logs:/fluentd/log
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - hydra-test-network
    environment:
      - FLUENTD_CONF=fluent.conf

volumes:
  hydra-test-cache:
    driver: local
  hydra-coverage:
    driver: local
  redis-test-data:
    driver: local
  test-files:
    driver: local
  test-logs:
    driver: local

networks:
  hydra-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# Docker Compose profiles for different test scenarios
x-profiles:
  unit-tests:
    services:
      - hydra-test
  
  integration-tests:
    services:
      - hydra-test
      - redis-test
      - mock-api
  
  e2e-tests:
    services:
      - hydra-test
      - redis-test
      - mock-api
      - file-system-test
  
  stress-tests:
    services:
      - hydra-test
      - file-system-test
      - performance-monitor
  
  security-tests:
    services:
      - hydra-test
      - security-test
  
  full-suite:
    services:
      - hydra-test
      - redis-test
      - mock-api
      - file-system-test
      - performance-monitor
      - security-test
      - fluentd